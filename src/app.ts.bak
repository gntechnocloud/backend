import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import compression from 'compression';
import morgan from 'morgan';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

import connectDB from './config/db';
import logger from './utils/logger';
import authRoutes from './routes/authRoutes';
import userRoutes from './routes/userRoutes';
import slotRoutes from './routes/slotRoutes';
import systemRoutes from './routes/systemRoutes';
import { optionalAuth } from './middleware/auth';
import { initDiamondEventListeners } from './listeners/diamondEventListener';
// import { reownService } from './services/reownService'; // Uncomment if exists

dotenv.config();

const app = express();
app.set('trust proxy', 1);

// Security headers
app.use(
  helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        styleSrc: ["'self'", "'unsafe-inline'"],
        scriptSrc: ["'self'"],
        imgSrc: ["'self'", 'data:', 'https:'],
      },
    },
    crossOriginEmbedderPolicy: false,
  })
);

// CORS
app.use(
  cors({
    origin: (origin, callback) => {
      const allowed = process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000'];
      if (!origin || allowed.includes(origin)) callback(null, true);
      else callback(new Error('Not allowed by CORS'));
    },
    credentials: true,
    optionsSuccessStatus: 200,
  })
);

// Rate limit
app.use(
  rateLimit({
    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '') || 15 * 60 * 1000,
    max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '') || 100,
    message: { error: 'Too many requests from this IP, try later.' },
    standardHeaders: true,
    legacyHeaders: false,
  })
);

// Auth rate limit
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 5,
  skipSuccessfulRequests: true,
  message: { error: 'Too many auth attempts, try later.' },
});

// Middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(compression());

// Logging
app.use(
  morgan(process.env.NODE_ENV === 'production' ? 'combined' : 'dev', {
    stream: {
      write: (msg) => logger.info(msg.trim()),
    },
  })
);

// Health check
app.get('/health', (_, res) =>
  res.status(200).json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development',
    version: process.env.npm_package_version || '1.0.0',
  })
);

// Status endpoint
app.get('/api/status', optionalAuth, (req, res) =>
  res.json({
    status: 'Fortunity NXT API is running',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    authenticated: !!req.user,
    blockchain: {
      network: process.env.BLOCKCHAIN_NETWORK || 'unknown',
      contractAddress: process.env.CONTRACT_ADDRESS || 'not configured',
    },
  })
);

// API routes
app.use('/api/auth', authLimiter, authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/slots', slotRoutes);
app.use('/api/system', systemRoutes);

// Static files
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, 'public')));
  app.get('*', (req, res) => {
    if (req.path.startsWith('/api/')) {
      return res.status(404).json({ message: 'API endpoint not found' });
    }
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
}

// Fallback 404
app.use('/api/*', (req, res) => {
  res.status(404).json({
    message: 'API endpoint not found',
    path: req.path,
    method: req.method,
  });
});

// Error handler
app.use((err, req, res, _next) => {
  logger.error('Unhandled error', {
    message: err.message,
    stack: err.stack,
    url: req.url,
    method: req.method,
    ip: req.ip,
  });

  res.status(500).json({
    message: process.env.NODE_ENV === 'production' ? 'Internal server error' : err.message,
    stack: process.env.NODE_ENV === 'production' ? undefined : err.stack,
    timestamp: new Date().toISOString(),
  });
});

// Graceful shutdown
process.on('SIGINT', () => {
  logger.info('SIGINT received, shutting down');
  globalThis.server?.close(() => process.exit(0));
});
process.on('SIGTERM', () => {
  logger.info('SIGTERM received, shutting down');
  globalThis.server?.close(() => process.exit(0));
});
process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
});
process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception:', error);
  process.exit(1);
});

// Server bootstrap
export async function startServer(): Promise<void> {
  try {
    await connectDB();
    logger.info('MongoDB connected');

    // Start event listeners
    initDiamondEventListeners();
    // reownService.initEventListeners(); // Uncomment when implemented

    const PORT = process.env.PORT || 8000;
    const server = app.listen(PORT, () => {
      logger.info(`Fortunity NXT API running on port ${PORT}`);
    });

    globalThis.server = server;
  } catch (error) {
    logger.error('Startup failed', error);
    process.exit(1);
  }
}

if (require.main === module) {
  startServer();
}

export default app;
